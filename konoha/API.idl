#!/usr/bin/env konoha
import("MiniKonoha.NameSpace");
import("Type.Json");
const Map[String]=StringMap;

Load("Syntax.IDL.k");
// DataType
alias int NodeId     // Id for Node
alias int ArgumentId // Id for NodeTree
alias int TimeLineId // Id for TimeLine
alias int ProcessId  // Id for Process
alias StringMap ProcessContext

alias int NodeType;
array NodeId NodeIdList;
array ProcessId ProcessIdList;
array Object NodeList; /* FIXME */

Type Node {
    attribute NodeId ThisNodeId;
    attribute NodeId PrevNodeId;
    attribute NodeId NextNodeId;
    attribute ArgumentId BelongedArgumentId;
    attribute NodeList   Children;
    attribute StringMap  Attributes;
}

Type TimeLine {
    attribute int    UnixTime;
    attribute NodeIdList OldNodeId;
    attribute NodeIdList NewNodeId;
}

Type Goal extends Node {};
Type Evidence extends Node {};
Type Stategy extends Node {};
Type Context extends Node {};
Type DscriptEvidence extends Evidence {
    attribute String script;
};
Type DscriptContext  extends Context {
    attribute String script;
};
Type TopGoal extends Goal {
    attribute ArgumentId ThisArgumentId;
    attribute NodeId TopGoalNodeId;
}

// API
//### ProcessContext
api ProcessId OpenProcessContext(ArgumentId Id, ProcessType Type, String CommiterName);
api ProcessId CloseProcessContext(ArgumentId Id, ProcessId pId, String Justification);
api ProcessId MergeProcessContext(ArgumentId Id, ProcessId targetProc, ProcessId mergeProc);
api ProcessIdList GetProcessContextIds(ArgumentId Id);

//### Node Operation
api Node       GetRootArgument();
api NodeIdList GetArgumentsIdList() //Return TopGoal ArgumentId List
api Node       GetNode(NodeId Id); // return Node Without child node
api NodeList   GetNodeTree(NodeId Id); // Node with child node
api NodeId     GetNodeId(ArgumentId Id);

api NodeList GetNodeTree(NodeId Id, TimeLineId timeStart, TImeLineId timeEnd);

//API that return New NodeId
api NodeId   Replace(NodeId OldNodeId, Node NewNodeTree);
api NodeId   Add(NodeId ParentNodeId, Node ChildNodeTree);
api NodeId   DeleteLink(NodeId ParentNodeId, Node TargetNode);
api NodeId   NewLink(NodeId ParentNodeId, TargetNodeId);
api NodeId   Create(NodeType Type, String Description);

//### Find
api NodeIdList FindNodeFrom(NodeType Type, NodeId NodeIdSearchFrom);
api NodeIdList FindNodeByDescription(String SearchText);
api NodeIdList FindContextByProperty(String SearchText);

//### D-Script
api ContextJson GetContext(NodeId Id);
api void Support(NodeId EvidenceNodeId, ProcessId Pid);
api void Rebuttal(NodeId EvidenceNodeId, ProcessId Pid, String Diagnosis);
// TODO Need to design D-Script API

//### TimeLine
api TimeLineList GetAllTimeLine(ArgumentId Id);
api TimeLineList GetTimeLineByProcessId(ProcessId Id);
api TimeLineList GetTimeLine(TimeLineId timeBegin, TimeLineId timeEnd);
