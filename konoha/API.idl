#!/usr/bin/env konoha
import("MiniKonoha.NameSpace");
import("Type.Json");
const Map[String]=StringMap;

Load("Syntax.IDL.k");

array int IntList;

api int CreateTopGoal(String description, int processType, String Justification, String commiter)
api int DeleteLink(int ParentNodeId, Json TargetNode)
api int NewLink(int ParentNodeId, int TargetNodeId)
api int CreateNode(int BelongedArgumentId, Json json)
api void UpdateNode(int BelongedArgumentId, Json json)
api void DeleteNode(int BelongedArgumentId, Json json)
api IntList FindNodeFrom(String NodeType, int NodeIdSearchFrom)
api IntList FindNodeByDescription(String SearchText)
api IntList FindContextByProperty(String SearchText)
api Json Commit(int BelongedArgumentId, Json args)
api Json getNode(int node_id)
api IntList getArgumentList()
api Json getNodeTree(int BelongedArgumentId)
api Json getNodeTree(int BelongedArgumentId, int SnapshotId)
api Json getNodeTree(int BelongedArgumentId, int snapshot_start_id, int snapshot_end_id)
api int OpenProcessContext(int BelongedArgumentId, int process_type, String Justification, String commiter_name)
api int CloseProcessContext(int BelongedArgumentId, int process_id, String Justification)
api IntList getProcessContextIds(int BelongedArgumentId)
api IntList getSnapshotList(int BelongedArgumentId)
api Json getContext(int NodeId)
api void Support(int EvidenceNodeId, int ProcessId)
api void Rebuttal(int EvidenceNodeId, int ProcessId, String Diagnosis)
